
# Detailed Explanation of the Algorithm

## Algorithm Workflow

Your algorithm can be broken down into several steps:

---

### 1. Audio Input Acquisition
- **Microphone Input:**  
  - The system captures audio data, including both the desired signal and environmental noise, through a microphone.
  - The audio input is converted into a digital signal using an **ADC (Analog-to-Digital Converter)**.

---

### 2. Preprocessing Using Spectral Subtraction
- **Purpose:**  
  - To enhance the algorithm’s noise cancellation performance by reducing stationary noise components before adaptive filtering.
  
- **Steps:**
  1. **Frame Division:** The incoming audio signal is divided into overlapping frames for short-time Fourier analysis.
  2. **FFT (Fast Fourier Transform):** Each frame is transformed into the frequency domain using FFT.
  3. **Noise Spectrum Estimation:** Noise is estimated during silent intervals or using a noise estimation algorithm.
  4. **Spectral Subtraction:** The estimated noise spectrum is subtracted from the signal spectrum:
     \[ S(f) = |X(f)| - |N(f)| \]
     where \( X(f) \) is the input signal spectrum, \( N(f) \) is the noise spectrum, and \( S(f) \) is the clean signal spectrum.
  5. **IFFT (Inverse FFT):** The denoised signal is transformed back to the time domain using IFFT.
  
- **Output:** A partially cleaned signal is passed to the adaptive filtering stage.

---

### 3. Adaptive Filtering
Adaptive filtering is the core of the noise cancellation system. It dynamically adjusts the filter coefficients based on the noise and desired signal characteristics. 

#### **Chosen Algorithm: Recursive Least Squares (RLS)**
- **Goal:** Minimize the mean square error (MSE) between the reference signal (desired signal) and the noisy signal.

- **Key Steps:**
  1. **Initialization:**
     - Start with an initial guess for the filter coefficients, typically \( \mathbf{w}[0] = 0 \).
     - Initialize the covariance matrix \( \mathbf{P}[0] \) as a scaled identity matrix \( \mathbf{P}[0] = \delta \mathbf{I} \), where \( \delta \) is a small positive constant.
  2. **Input and Error Computation:**
     - For each time step \( n \), capture the input vector \( \mathbf{x}[n] \) (past samples of the noisy signal).
     - Compute the filter output:
       \[ y[n] = \mathbf{w}[n-1]^T \mathbf{x}[n] \]
     - Calculate the error between the desired signal \( d[n] \) and the filter output:
       \[ e[n] = d[n] - y[n] \]
  3. **Gain Vector Update:**
     - Update the gain vector \( \mathbf{k}[n] \) based on the covariance matrix:
       \[ \mathbf{k}[n] = \frac{\mathbf{P}[n-1] \mathbf{x}[n]}{\lambda + \mathbf{x}[n]^T \mathbf{P}[n-1] \mathbf{x}[n]} \]
       where \( \lambda \) is the forgetting factor (0 < \( \lambda \) ≤ 1) controlling how quickly old data is "forgotten."
  4. **Filter Coefficient Update:**
     - Update the filter coefficients to minimize MSE:
       \[ \mathbf{w}[n] = \mathbf{w}[n-1] + \mathbf{k}[n] e[n] \]
  5. **Covariance Matrix Update:**
     - Update the inverse covariance matrix:
       \[ \mathbf{P}[n] = \frac{\mathbf{P}[n-1]}{\lambda} - \frac{\mathbf{k}[n] \mathbf{x}[n]^T \mathbf{P}[n-1]}{\lambda} \]

- **Output:** The filter produces a cleaned version of the signal by removing noise components adaptively.

---

### 4. Step-Size Optimization with Particle Swarm Optimization (PSO)
- **Purpose:**  
  - To accelerate convergence by optimizing the step-size parameter dynamically.
  
- **Steps:**
  1. **Particle Initialization:** Initialize a swarm of particles, where each particle represents a candidate step size.
  2. **Fitness Evaluation:** Evaluate the performance of each particle (step size) based on the SNR of the filtered signal.
  3. **Velocity and Position Update:** Update particle velocities and positions based on:
     - The particle’s best-known position (local best).
     - The swarm’s global best-known position.
  4. **Convergence:** Continue until the swarm converges to the optimal step size.

- **Integration:** The optimized step size is fed back into the adaptive filtering algorithm to fine-tune the filter's updates.

---

### 5. Post-Processing and Audio Output
- **Steps:**
  1. **Smoothing:** Apply a smoothing function to reduce any residual noise artifacts from adaptive filtering.
  2. **Audio Playback:** Convert the processed signal back to analog form using a DAC and play it through a speaker.

---

## Algorithm Advantages
1. **RLS Performance:** High SNR improvement and faster convergence compared to LMS and NLMS.
2. **Spectral Subtraction:** Removes stationary noise effectively, reducing the burden on adaptive filtering.
3. **PSO Tuning:** Ensures optimal filter performance by dynamically selecting the step size.

---

This detailed breakdown explains the algorithm’s design and implementation process, highlighting its innovative use of preprocessing, optimization, and adaptive filtering techniques.
